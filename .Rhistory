knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)         # for graphing and data cleaning
library(tidymodels)        # for modeling
library(themis)            # for step functions for unbalanced data
library(doParallel)        # for parallel processing
library(stacks)            # for stacking models
library(naniar)            # for examining missing values (NAs)
library(lubridate)         # for date manipulation
library(moderndive)        # for King County housing data
library(vip)               # for variable importance plots
library(patchwork)         # for combining plots nicely
library(xgboost)
library(leaps)
theme_set(theme_minimal()) # Lisa's favorite theme
library(readxl)
ADS_Project_11_24_2021_v4 <- read_excel("ADS_Project - 11.24.2021.v4.xlsx")
Master <- ADS_Project_11_24_2021_v4 %>%
select(-c(`Last Calculated EOD metrics (time, in seconds)`, `Block Count`, `Block Size (mean, in bytes)`, `Block Weight, (mean`, `Capitalization of current supply, MVRV`, `Capitalization of free float, MVRV`, `Difficulty, Last Block`, `Difficulty, Mean Block`, `Mean Transaction Fee per Byte of all blocks, native units`, `Mean Transaction Fee per Byte, native units`, `Median Transaction Fee, native units`, `Median Fee per Transacation, USD`, `Addresses balance greater than 0.001 native units`, `Addresses balance greater than 0.01 native units`, `Addresses balance greater than 0.1 native units`,`Addresses balance greater than 100 native units`, `Addresses balance greater than 100K native units`, `Addresses balance greater than 10 native units`, `Addresses balance greater than 10K native units`, `Addresses balance greater than 1 native units`, `Addresses balance greater than 1K native units`, `Addresses balance greater than 1M native units`, `Addresses balance greater than 1in100K`, `Addresses balance greater than 1in100M`, `Addresses balance greater than 1in10B`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10M`, `Addresses balance greater than 1in1B`, `Addresses balance greater than 1in1K`, `Addressesbalance greater than 1in1M`, `Total Fees, native units`, `Flow to exchanges, native units`, `Flow out exchanges, native units`, `Gas Limit Block`, `Gas Limit, transaction`, `Gas Used, transaction`, `Hash Rate Mean, 30d`, `Issuance, native units`, `Issuance, percent annualized`, `Issuance,  percent daily`, `Issuance Total, native units`,`NVT, adjusted, 90d MA`, `NVT, adjusted, free float,  90d MA`, `ROI, 1y (%)`, `Revenue, per hash unit (Native Currency)`, `Revenue Daily, per hash unit/second (Native Currency)`, `Miner Rev (Native Currency)`, `Supply, 10y Active`, `Supply, 5yr Active`, `Supply, 4yr Active`, `Supply, 3yr Active`, `Supply, 1yr Active Trailing (%)`, `Supply, in addresses (<0.001, native currency)`, `Supply, in addresses (<0.01M, native currency)`, `Supply, in addresses (<0.1, native currency)`, `Supply, in addresses (<1, native currency)`, `Supply, in addresses (<10, native currency)`, `Supply, in addresses (<100, native currency)`, `Supply, in addresses (<100K, native currency)`, `Supply, in addresses (<10K, native currency)`, `Supply, in addresses (<1K, native currency)`, `Supply, in addresses (<1M, native currency)`, `Supply, Miner address with 1 mining entity (native currency)`, `Supply, All Miners (native currency)`, `Transactions, adjusted transfer value (native currency)`, `Transactions, mean transfer value (native currency)`, `Transactions, median transfer value (native currency)`, `Transactions, mean transfer value ($)`, `Transactions, median transfer value (native currency)`, `Velocity, 1yr current supply`, `Volatility, 180d daily returns`, `Volatility, 30d daily returns`, `Price, BTC`, `Price, ($)`))
Master_Training %>% select(where(is.numeric)) %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "value") %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30) +
facet_wrap(vars(variable),
scales = "free")
Master_Split <- initial_split(Master, prop = 0.75)
Master_Training <- training(Master_Split)
Master_Testing <- testing(Master_Split)
backstep_model <- train(
Price ~.,
data = Master_Split,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:82),
trControl = trainControl(method = "cv", number = 5),
metric = "MAE",
na.action = na.omit
)
library(tidyverse)         # for graphing and data cleaning
library(tidymodels)        # for modeling
library(themis)            # for step functions for unbalanced data
library(doParallel)        # for parallel processing
library(stacks)            # for stacking models
library(naniar)            # for examining missing values (NAs)
library(lubridate)         # for date manipulation
library(moderndive)        # for King County housing data
library(vip)               # for variable importance plots
library(patchwork)         # for combining plots nicely
library(xgboost)
library(leaps)
library(caret)
theme_set(theme_minimal()) # Lisa's favorite theme
backstep_model <- train(
Price ~.,
data = Master_Split,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:82),
trControl = trainControl(method = "cv", number = 5),
metric = "MAE",
na.action = na.omit
)
forwardstep_model <- train(
Price ~.,
data = Master_Training,
method = "leapForward",
tuneGrid = data.frame(nvmax = 1:10),
trControl = trainControl(method = "cv", number = 5),
metric = "MAE",
na.action = na.omit
)
knitr::opts_chunk$set(echo = TRUE)
forwardstep_model <- train(
Price ~.,
data = Master_Training,
method = "leapForward",
tuneGrid = data.frame(nvmax = 1:10),
trControl = trainControl(method = "cv", number = 5),
metric = "MAE",
na.action = na.omit
)
backstep_model <- train(
Price ~.,
data = Master_Split,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:30),
trControl = trainControl(method = "cv", number = 5),
metric = "MAE",
na.action = na.omit
)
Master <- ADS_Project_11_24_2021_v4 %>%
select(-c(`Last Calculated EOD metrics (time, in seconds)`, `Block Count`, `Block Size (mean, in bytes)`, `Block Weight, (mean`, `Capitalization of current supply, MVRV`, `Capitalization of free float, MVRV`, `Difficulty, Last Block`, `Difficulty, Mean Block`, `Mean Transaction Fee per Byte of all blocks, native units`, `Mean Transaction Fee per Byte, native units`, `Median Transaction Fee, native units`, `Median Fee per Transacation, USD`, `Addresses balance greater than 0.001 native units`, `Addresses balance greater than 0.01 native units`, `Addresses balance greater than 0.1 native units`,`Addresses balance greater than 100 native units`, `Addresses balance greater than 100K native units`, `Addresses balance greater than 10 native units`, `Addresses balance greater than 10K native units`, `Addresses balance greater than 1 native units`, `Addresses balance greater than 1K native units`, `Addresses balance greater than 1M native units`, `Addresses balance greater than 1in100K`, `Addresses balance greater than 1in100M`, `Addresses balance greater than 1in10B`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10M`, `Addresses balance greater than 1in1B`, `Addresses balance greater than 1in1K`, `Addressesbalance greater than 1in1M`, `Total Fees, native units`, `Flow to exchanges, native units`, `Flow out exchanges, native units`, `Gas Limit Block`, `Gas Limit, transaction`, `Gas Used, transaction`, `Hash Rate Mean, 30d`, `Issuance, native units`, `Issuance, percent annualized`, `Issuance,  percent daily`, `Issuance Total, native units`,`NVT, adjusted, 90d MA`, `NVT, adjusted, free float,  90d MA`, `ROI, 1y (%)`, `Revenue, per hash unit (Native Currency)`, `Revenue Daily, per hash unit/second (Native Currency)`, `Miner Rev (Native Currency)`, `Supply, 10y Active`, `Supply, 5yr Active`, `Supply, 4yr Active`, `Supply, 3yr Active`, `Supply, 1yr Active Trailing (%)`, `Supply, in addresses (<0.001, native currency)`, `Supply, in addresses (<0.01M, native currency)`, `Supply, in addresses (<0.1, native currency)`, `Supply, in addresses (<1, native currency)`, `Supply, in addresses (<10, native currency)`, `Supply, in addresses (<100, native currency)`, `Supply, in addresses (<100K, native currency)`, `Supply, in addresses (<10K, native currency)`, `Supply, in addresses (<1K, native currency)`, `Supply, in addresses (<1M, native currency)`, `Supply, Miner address with 1 mining entity (native currency)`, `Supply, All Miners (native currency)`, `Transactions, adjusted transfer value (native currency)`, `Transactions, mean transfer value (native currency)`, `Transactions, median transfer value (native currency)`, `Transactions, mean transfer value ($)`, `Transactions, median transfer value (native currency)`, `Velocity, 1yr current supply`, `Volatility, 180d daily returns`, `Volatility, 30d daily returns`, `Price, BTC`, `Transactions, median transfer value ($)`, `Price, ($)`))
forwardstep_model <- train(
Price ~.,
data = Master_Training,
method = "leapForward",
tuneGrid = data.frame(nvmax = 1:10),
trControl = trainControl(method = "cv", number = 5),
metric = "MAE",
na.action = na.omit
)
Master_Split <- initial_split(Master, prop = 0.75)
Master_Training <- training(Master_Split)
Master_Testing <- testing(Master_Split)
forwardstep_model <- train(
Price ~.,
data = Master_Training,
method = "leapForward",
tuneGrid = data.frame(nvmax = 1:10),
trControl = trainControl(method = "cv", number = 5),
metric = "MAE",
na.action = na.omit
)
splits <- trainControl(method = "cv", number = 5)
Master_CV <- train(
Price~.,
data = Master_Training,
method = "lm",
trControl = splits,
na.action = na.omit
)
summary(Master_CV) %>%
coef() %>%
as_tibble(rownames = "term")
coefficients(Master_CV$finalModel, .05)
splits <- trainControl(method = "cv", number = 5)
Master_CV <- train(
Price~.,
data = Master_Training,
method = "lm",
trControl = splits,
na.action = na.omit
)
summary(Master_CV) %>%
coef() %>%
as_tibble(rownames = "term")
coefficients(Master_CV$finalModel, .05)
summary(Master_CV) %>%
coef() %>%
as_tibble(rownames = "term")
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master_Training,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = .05),
na.action = na.omit
)
summary(Master_CV) %>%
coef() %>%
as_tibble(rownames = "term")
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master_Training,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = .05),
na.action = na.omit
)
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master_Training,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = .05),
na.action = na.omit
)
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master_Training,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = .05),
na.action = na.omit
)
coefficients(Master_CV$finalModel, .05)
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = .05),
na.action = na.omit
)
coefficients(Master_CV$finalModel, .05)
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = 0.1),
na.action = na.omit
)
coefficients(Master_CV$finalModel, .1)
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = 0.5),
na.action = na.omit
)
coefficients(Master_CV$finalModel, .5)
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = 0.01),
na.action = na.omit
)
coefficients(Master_CV$finalModel, .01)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
ADS_Project_11_24_2021_v4 <- read_excel("ADS_Project - 11.24.2021.v4.xlsx") %>%
mutate(Date = ymd(Date))
Master <- ADS_Project_11_24_2021_v4 %>%
select(-c(`Last Calculated EOD metrics (time, in seconds)`, `Block Count`, `Block Size (mean, in bytes)`, `Block Weight, (mean`, `Capitalization of current supply, MVRV`, `Capitalization of free float, MVRV`, `Difficulty, Last Block`, `Difficulty, Mean Block`, `Mean Transaction Fee per Byte of all blocks, native units`, `Mean Transaction Fee per Byte, native units`, `Median Transaction Fee, native units`, `Median Fee per Transacation, USD`, `Addresses balance greater than 0.001 native units`, `Addresses balance greater than 0.01 native units`, `Addresses balance greater than 0.1 native units`,`Addresses balance greater than 100 native units`, `Addresses balance greater than 100K native units`, `Addresses balance greater than 10 native units`, `Addresses balance greater than 10K native units`, `Addresses balance greater than 1 native units`, `Addresses balance greater than 1K native units`, `Addresses balance greater than 1M native units`, `Addresses balance greater than 1in100K`, `Addresses balance greater than 1in100M`, `Addresses balance greater than 1in10B`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10M`, `Addresses balance greater than 1in1B`, `Addresses balance greater than 1in1K`, `Addressesbalance greater than 1in1M`, `Total Fees, native units`, `Flow to exchanges, native units`, `Flow out exchanges, native units`, `Gas Limit Block`, `Gas Limit, transaction`, `Gas Used, transaction`, `Hash Rate Mean, 30d`, `Issuance, native units`, `Issuance, percent annualized`, `Issuance,  percent daily`, `Issuance Total, native units`,`NVT, adjusted, 90d MA`, `NVT, adjusted, free float,  90d MA`, `ROI, 1y (%)`, `Revenue, per hash unit (Native Currency)`, `Revenue Daily, per hash unit/second (Native Currency)`, `Miner Rev (Native Currency)`, `Supply, 10y Active`, `Supply, 5yr Active`, `Supply, 4yr Active`, `Supply, 3yr Active`, `Supply, 1yr Active Trailing (%)`, `Supply, in addresses (<0.001, native currency)`, `Supply, in addresses (<0.01M, native currency)`, `Supply, in addresses (<0.1, native currency)`, `Supply, in addresses (<1, native currency)`, `Supply, in addresses (<10, native currency)`, `Supply, in addresses (<100, native currency)`, `Supply, in addresses (<100K, native currency)`, `Supply, in addresses (<10K, native currency)`, `Supply, in addresses (<1K, native currency)`, `Supply, in addresses (<1M, native currency)`, `Supply, Miner address with 1 mining entity (native currency)`, `Supply, All Miners (native currency)`, `Transactions, adjusted transfer value (native currency)`, `Transactions, mean transfer value (native currency)`, `Transactions, median transfer value (native currency)`, `Transactions, mean transfer value ($)`, `Transactions, median transfer value (native currency)`, `Velocity, 1yr current supply`, `Volatility, 180d daily returns`, `Volatility, 30d daily returns`, `Price, BTC`, `Transactions, median transfer value ($)`, `Price, ($)`))
Master_Split <- initial_split(Master, prop = 0.75)
Master_Training <- training(Master_Split)
Master_Testing <- testing(Master_Split)
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = 0.01),
na.action = na.omit
)
coefficients(Master_CV$finalModel, .05)
knitr::opts_chunk$set(echo = TRUE)
set.seed(456)
lasso_2 <- train(
Price~.,
data = Master,
method = "glmnet",
tuneGrid = data_frame(alpha = 1, lambda = seq(0,10, length = 100)),
trControl = trainControl(method = "cv", number = 5, selectionFunction = best),
metric = "MAE",
na.action = na.omit
)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
set.seed(456)
lasso_2 <- train(
Price~.,
data = Master,
method = "glmnet",
tuneGrid = data_frame(alpha = 1, lambda = seq(0,10, length = 100)),
trControl = trainControl(method = "cv", number = 5, selectionFunction = best),
metric = "MAE",
na.action = na.omit
)
#knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(tidyverse)         # for graphing and data cleaning
library(tidymodels)        # for modeling
library(themis)            # for step functions for unbalanced data
library(doParallel)        # for parallel processing
library(stacks)            # for stacking models
library(naniar)            # for examining missing values (NAs)
library(lubridate)         # for date manipulation
library(moderndive)        # for King County housing data
library(vip)               # for variable importance plots
library(patchwork)         # for combining plots nicely
library(xgboost)
theme_set(theme_minimal()) # Lisa's favorite theme
library(readxl)
ADS_Project_11_24_2021_v4 <- read_excel("ADS_Project - 11.24.2021.v4.xlsx")
set.seed(456)
lasso_2 <- train(
Price~.,
data = Master,
method = "glmnet",
tuneGrid = data_frame(alpha = 1, lambda = seq(0,10, length = 100)),
trControl = trainControl(method = "cv", number = 5, selectionFunction = best),
metric = "MAE",
na.action = na.omit
)
Master <- ADS_Project_11_24_2021_v4 %>%
select(-c(`Last Calculated EOD metrics (time, in seconds)`, `Block Count`, `Block Size (mean, in bytes)`, `Block Weight, (mean`, `Capitalization of current supply, MVRV`, `Capitalization of free float, MVRV`, `Difficulty, Last Block`, `Difficulty, Mean Block`, `Mean Transaction Fee per Byte of all blocks, native units`, `Mean Transaction Fee per Byte, native units`, `Median Transaction Fee, native units`, `Median Fee per Transacation, USD`, `Addresses balance greater than 0.001 native units`, `Addresses balance greater than 0.01 native units`, `Addresses balance greater than 0.1 native units`,`Addresses balance greater than 100 native units`, `Addresses balance greater than 100K native units`, `Addresses balance greater than 10 native units`, `Addresses balance greater than 10K native units`, `Addresses balance greater than 1 native units`, `Addresses balance greater than 1K native units`, `Addresses balance greater than 1M native units`, `Addresses balance greater than 1in100K`, `Addresses balance greater than 1in100M`, `Addresses balance greater than 1in10B`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10M`, `Addresses balance greater than 1in1B`, `Addresses balance greater than 1in1K`, `Addressesbalance greater than 1in1M`, `Total Fees, native units`, `Flow to exchanges, native units`, `Flow out exchanges, native units`, `Gas Limit Block`, `Gas Limit, transaction`, `Gas Used, transaction`, `Hash Rate Mean, 30d`, `Issuance, native units`, `Issuance, percent annualized`, `Issuance,  percent daily`, `Issuance Total, native units`,`NVT, adjusted, 90d MA`, `NVT, adjusted, free float,  90d MA`, `ROI, 1y (%)`, `Revenue, per hash unit (Native Currency)`, `Revenue Daily, per hash unit/second (Native Currency)`, `Miner Rev (Native Currency)`, `Supply, 10y Active`, `Supply, 5yr Active`, `Supply, 4yr Active`, `Supply, 3yr Active`, `Supply, 1yr Active Trailing (%)`, `Supply, in addresses (<0.001, native currency)`, `Supply, in addresses (<0.01M, native currency)`, `Supply, in addresses (<0.1, native currency)`, `Supply, in addresses (<1, native currency)`, `Supply, in addresses (<10, native currency)`, `Supply, in addresses (<100, native currency)`, `Supply, in addresses (<100K, native currency)`, `Supply, in addresses (<10K, native currency)`, `Supply, in addresses (<1K, native currency)`, `Supply, in addresses (<1M, native currency)`, `Supply, Miner address with 1 mining entity (native currency)`, `Supply, All Miners (native currency)`, `Transactions, adjusted transfer value (native currency)`, `Transactions, mean transfer value (native currency)`, `Transactions, median transfer value (native currency)`, `Transactions, mean transfer value ($)`, `Transactions, median transfer value (native currency)`, `Velocity, 1yr current supply`, `Volatility, 180d daily returns`, `Volatility, 30d daily returns`, `Price, BTC`, `Price, ($)`, `Transactions, median transfer value ($)`))
Master_Split <- initial_split(Master, prop = 0.75)
Master_Training <- training(Master_Split)
Master_Testing <- testing(Master_Split)
set.seed(456)
lasso_2 <- train(
Price~.,
data = Master,
method = "glmnet",
tuneGrid = data_frame(alpha = 1, lambda = seq(0,10, length = 100)),
trControl = trainControl(method = "cv", number = 5, selectionFunction = best),
metric = "MAE",
na.action = na.omit
)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
set.seed(456)
lasso_2 <- train(
Price~.,
data = Master,
method = "glmnet",
tuneGrid = data_frame(alpha = 1, lambda = seq(0,10, length = 100)),
trControl = trainControl(method = "cv", number = 5, selectionFunction = best),
metric = "MAE",
na.action = na.omit
)
set.seed(456)
lasso_recipe <-
recipe(Price~.,
data = Master_Training) %>%
step_mutate_at(all_numeric(), -all_outcomes(), fn= ~ as.numeric(.)) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_predictors(),
-all_nominal(),
-has_role(match = 'evaluative'))
lasso_recipe %>%
prep() %>%
juice()
lasso_model <-
logistic_reg(mixture = 1) %>%
set_engine("glmnet") %>%
set_args(penalty = tune()) %>%
set_mode("classification")
lasso_wf <- workflow() %>%
add_recipe(lasso_recipe) %>%
add_model(lasso_model)
set.seed(456)
Bitcoin_cv <- vfold_cv(Master_Training,v = 5)
penalty_grid <- grid_regular(penalty(), levels = 10)
ctrl_grid <- control_stack_resamples()
metric <- metric_set(accuracy)
lasso_tune <-
lasso_wf %>%
tune_grid(
resamples = Bitcoin_cv,
grid = penalty_grid,
control = ctrl_grid
)
lasso_tune %>% collect_metrics()
set.seed(456)
lasso_2 <- train(
Price~.,
data = Master,
method = "glmnet",
tuneGrid = data_frame(alpha = 1, lambda = seq(0,10, length = 100)),
trControl = trainControl(method = "cv", number = 5, selectionFunction = best),
metric = "MAE",
na.action = na.omit
)
plot(lasso_2)
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = 0.01),
na.action = na.omit
)
coefficients(Master_CV$finalModel, .01)
library(tidyverse)         # for graphing and data cleaning
library(tidymodels)        # for modeling
library(themis)            # for step functions for unbalanced data
library(doParallel)        # for parallel processing
library(stacks)            # for stacking models
library(naniar)            # for examining missing values (NAs)
library(lubridate)         # for date manipulation
library(moderndive)        # for King County housing data
library(vip)               # for variable importance plots
library(patchwork)         # for combining plots nicely
library(xgboost)
library(leaps)
library(caret)
theme_set(theme_minimal()) # Lisa's favorite theme
library(readxl)
ADS_Project_11_24_2021_v4 <- read_excel("ADS_Project - 11.24.2021.v4.xlsx") %>%
mutate(Date = ymd(Date))
Master <- ADS_Project_11_24_2021_v4 %>%
select(-c(`Last Calculated EOD metrics (time, in seconds)`, `Block Count`, `Block Size (mean, in bytes)`, `Block Weight, (mean`, `Capitalization of current supply, MVRV`, `Capitalization of free float, MVRV`, `Difficulty, Last Block`, `Difficulty, Mean Block`, `Mean Transaction Fee per Byte of all blocks, native units`, `Mean Transaction Fee per Byte, native units`, `Median Transaction Fee, native units`, `Median Fee per Transacation, USD`, `Addresses balance greater than 0.001 native units`, `Addresses balance greater than 0.01 native units`, `Addresses balance greater than 0.1 native units`,`Addresses balance greater than 100 native units`, `Addresses balance greater than 100K native units`, `Addresses balance greater than 10 native units`, `Addresses balance greater than 10K native units`, `Addresses balance greater than 1 native units`, `Addresses balance greater than 1K native units`, `Addresses balance greater than 1M native units`, `Addresses balance greater than 1in100K`, `Addresses balance greater than 1in100M`, `Addresses balance greater than 1in10B`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10M`, `Addresses balance greater than 1in1B`, `Addresses balance greater than 1in1K`, `Addressesbalance greater than 1in1M`, `Total Fees, native units`, `Flow to exchanges, native units`, `Flow out exchanges, native units`, `Gas Limit Block`, `Gas Limit, transaction`, `Gas Used, transaction`, `Hash Rate Mean, 30d`, `Issuance, native units`, `Issuance, percent annualized`, `Issuance,  percent daily`, `Issuance Total, native units`,`NVT, adjusted, 90d MA`, `NVT, adjusted, free float,  90d MA`, `ROI, 1y (%)`, `Revenue, per hash unit (Native Currency)`, `Revenue Daily, per hash unit/second (Native Currency)`, `Miner Rev (Native Currency)`, `Supply, 10y Active`, `Supply, 5yr Active`, `Supply, 4yr Active`, `Supply, 3yr Active`, `Supply, 1yr Active Trailing (%)`, `Supply, in addresses (<0.001, native currency)`, `Supply, in addresses (<0.01M, native currency)`, `Supply, in addresses (<0.1, native currency)`, `Supply, in addresses (<1, native currency)`, `Supply, in addresses (<10, native currency)`, `Supply, in addresses (<100, native currency)`, `Supply, in addresses (<100K, native currency)`, `Supply, in addresses (<10K, native currency)`, `Supply, in addresses (<1K, native currency)`, `Supply, in addresses (<1M, native currency)`, `Supply, Miner address with 1 mining entity (native currency)`, `Supply, All Miners (native currency)`, `Transactions, adjusted transfer value (native currency)`, `Transactions, mean transfer value (native currency)`, `Transactions, median transfer value (native currency)`, `Transactions, mean transfer value ($)`, `Transactions, median transfer value (native currency)`, `Velocity, 1yr current supply`, `Volatility, 180d daily returns`, `Volatility, 30d daily returns`, `Price, BTC`, `Transactions, median transfer value ($)`, `Price, ($)`))
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = 0.01),
na.action = na.omit
)
coefficients(Master_CV$finalModel, .01)
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = 0.0001),
na.action = na.omit
)
coefficients(Master_CV$finalModel,0.0001)
View(Master)
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = 0.0001),
na.action = na.omit
)
coefficients(Master_CV$finalModel,0.0001)
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = 0.000001),
na.action = na.omit
)
coefficients(Master_CV$finalModel,0.000001)
Master_Training %>% select(where(is.numeric)) %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "value") %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30) +
facet_wrap(vars(variable),
scales = "free")
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = 0.000000001),
na.action = na.omit
)
coefficients(Master_CV$finalModel,0.000000001)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
ADS_Project_11_24_2021_v5 <- read_excel("ADS_Project - 11.29.2021.v5.xlsx") %>%
mutate(Date = ymd(Date))
Master <- ADS_Project_11_24_2021_v4 %>%
select(-c(`Last Calculated EOD metrics (time, in seconds)`, `Block Count`, `Block Size (mean, in bytes)`, `Block Weight, (mean`, `Capitalization of current supply, MVRV`, `Capitalization of free float, MVRV`, `Difficulty, Last Block`, `Difficulty, Mean Block`, `Mean Transaction Fee per Byte of all blocks, native units`, `Mean Transaction Fee per Byte, native units`, `Median Transaction Fee, native units`, `Median Fee per Transacation, USD`, `Addresses balance greater than 0.001 native units`, `Addresses balance greater than 0.01 native units`, `Addresses balance greater than 0.1 native units`,`Addresses balance greater than 100 native units`, `Addresses balance greater than 100K native units`, `Addresses balance greater than 10 native units`, `Addresses balance greater than 10K native units`, `Addresses balance greater than 1 native units`, `Addresses balance greater than 1K native units`, `Addresses balance greater than 1M native units`, `Addresses balance greater than 1in100K`, `Addresses balance greater than 1in100M`, `Addresses balance greater than 1in10B`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10M`, `Addresses balance greater than 1in1B`, `Addresses balance greater than 1in1K`, `Addressesbalance greater than 1in1M`, `Total Fees, native units`, `Flow to exchanges, native units`, `Flow out exchanges, native units`, `Gas Limit Block`, `Gas Limit, transaction`, `Gas Used, transaction`, `Hash Rate Mean, 30d`, `Issuance, native units`, `Issuance, percent annualized`, `Issuance,  percent daily`, `Issuance Total, native units`,`NVT, adjusted, 90d MA`, `NVT, adjusted, free float,  90d MA`, `ROI, 1y (%)`, `Revenue, per hash unit (Native Currency)`, `Revenue Daily, per hash unit/second (Native Currency)`, `Miner Rev (Native Currency)`, `Supply, 10y Active`, `Supply, 5yr Active`, `Supply, 4yr Active`, `Supply, 3yr Active`, `Supply, 1yr Active Trailing (%)`, `Supply, in addresses (<0.001, native currency)`, `Supply, in addresses (<0.01M, native currency)`, `Supply, in addresses (<0.1, native currency)`, `Supply, in addresses (<1, native currency)`, `Supply, in addresses (<10, native currency)`, `Supply, in addresses (<100, native currency)`, `Supply, in addresses (<100K, native currency)`, `Supply, in addresses (<10K, native currency)`, `Supply, in addresses (<1K, native currency)`, `Supply, in addresses (<1M, native currency)`, `Supply, Miner address with 1 mining entity (native currency)`, `Supply, All Miners (native currency)`, `Transactions, adjusted transfer value (native currency)`, `Transactions, mean transfer value (native currency)`, `Transactions, median transfer value (native currency)`, `Transactions, mean transfer value ($)`, `Transactions, median transfer value (native currency)`, `Velocity, 1yr current supply`, `Volatility, 180d daily returns`, `Volatility, 30d daily returns`, `Price, BTC`, `Transactions, median transfer value ($)`, `Price, ($)`))
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = 0.000000001),
na.action = na.omit
)
coefficients(Master_CV$finalModel,0.000000001)
Master <- ADS_Project_11_24_2021_v5 %>%
select(-c(`Last Calculated EOD metrics (time, in seconds)`, `Block Count`, `Block Size (mean, in bytes)`, `Block Weight, (mean`, `Capitalization of current supply, MVRV`, `Capitalization of free float, MVRV`, `Difficulty, Last Block`, `Difficulty, Mean Block`, `Mean Transaction Fee per Byte of all blocks, native units`, `Mean Transaction Fee per Byte, native units`, `Median Transaction Fee, native units`, `Median Fee per Transacation, USD`, `Addresses balance greater than 0.001 native units`, `Addresses balance greater than 0.01 native units`, `Addresses balance greater than 0.1 native units`,`Addresses balance greater than 100 native units`, `Addresses balance greater than 100K native units`, `Addresses balance greater than 10 native units`, `Addresses balance greater than 10K native units`, `Addresses balance greater than 1 native units`, `Addresses balance greater than 1K native units`, `Addresses balance greater than 1M native units`, `Addresses balance greater than 1in100K`, `Addresses balance greater than 1in100M`, `Addresses balance greater than 1in10B`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10M`, `Addresses balance greater than 1in1B`, `Addresses balance greater than 1in1K`, `Addressesbalance greater than 1in1M`, `Total Fees, native units`, `Flow to exchanges, native units`, `Flow out exchanges, native units`, `Gas Limit Block`, `Gas Limit, transaction`, `Gas Used, transaction`, `Hash Rate Mean, 30d`, `Issuance, native units`, `Issuance, percent annualized`, `Issuance,  percent daily`, `Issuance Total, native units`,`NVT, adjusted, 90d MA`, `NVT, adjusted, free float,  90d MA`, `ROI, 1y (%)`, `Revenue, per hash unit (Native Currency)`, `Revenue Daily, per hash unit/second (Native Currency)`, `Miner Rev (Native Currency)`, `Supply, 10y Active`, `Supply, 5yr Active`, `Supply, 4yr Active`, `Supply, 3yr Active`, `Supply, 1yr Active Trailing (%)`, `Supply, in addresses (<0.001, native currency)`, `Supply, in addresses (<0.01M, native currency)`, `Supply, in addresses (<0.1, native currency)`, `Supply, in addresses (<1, native currency)`, `Supply, in addresses (<10, native currency)`, `Supply, in addresses (<100, native currency)`, `Supply, in addresses (<100K, native currency)`, `Supply, in addresses (<10K, native currency)`, `Supply, in addresses (<1K, native currency)`, `Supply, in addresses (<1M, native currency)`, `Supply, Miner address with 1 mining entity (native currency)`, `Supply, All Miners (native currency)`, `Transactions, adjusted transfer value (native currency)`, `Transactions, mean transfer value (native currency)`, `Transactions, median transfer value (native currency)`, `Transactions, mean transfer value ($)`, `Transactions, median transfer value (native currency)`, `Velocity, 1yr current supply`, `Volatility, 180d daily returns`, `Volatility, 30d daily returns`, `Price, BTC`, `Transactions, median transfer value ($)`, `Price, ($)`))
Master.v5 <- ADS_Project_11_24_2021_v5 %>%
select(-c(`Last Calculated EOD metrics (time, in seconds)`, `Block Count`, `Block Size (mean, in bytes)`, `Block Weight, (mean`, `Capitalization of current supply, MVRV`, `Capitalization of free float, MVRV`, `Difficulty, Last Block`, `Difficulty, Mean Block`, `Mean Transaction Fee per Byte of all blocks, native units`, `Mean Transaction Fee per Byte, native units`, `Median Transaction Fee, native units`, `Median Fee per Transacation, USD`, `Addresses balance greater than 0.001 native units`, `Addresses balance greater than 0.01 native units`, `Addresses balance greater than 0.1 native units`,`Addresses balance greater than 100 native units`, `Addresses balance greater than 100K native units`, `Addresses balance greater than 10 native units`, `Addresses balance greater than 10K native units`, `Addresses balance greater than 1 native units`, `Addresses balance greater than 1K native units`, `Addresses balance greater than 1M native units`, `Addresses balance greater than 1in100K`, `Addresses balance greater than 1in100M`, `Addresses balance greater than 1in10B`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10K`, `Addresses balance greater than 1in10M`, `Addresses balance greater than 1in1B`, `Addresses balance greater than 1in1K`, `Addressesbalance greater than 1in1M`, `Total Fees, native units`, `Flow to exchanges, native units`, `Flow out exchanges, native units`, `Gas Limit Block`, `Gas Limit, transaction`, `Gas Used, transaction`, `Hash Rate Mean, 30d`, `Issuance, native units`, `Issuance, percent annualized`, `Issuance,  percent daily`, `Issuance Total, native units`,`NVT, adjusted, 90d MA`, `NVT, adjusted, free float,  90d MA`, `ROI, 1y (%)`, `Revenue, per hash unit (Native Currency)`, `Revenue Daily, per hash unit/second (Native Currency)`, `Miner Rev (Native Currency)`, `Supply, 10y Active`, `Supply, 5yr Active`, `Supply, 4yr Active`, `Supply, 3yr Active`, `Supply, 1yr Active Trailing (%)`, `Supply, in addresses (<0.001, native currency)`, `Supply, in addresses (<0.01M, native currency)`, `Supply, in addresses (<0.1, native currency)`, `Supply, in addresses (<1, native currency)`, `Supply, in addresses (<10, native currency)`, `Supply, in addresses (<100, native currency)`, `Supply, in addresses (<100K, native currency)`, `Supply, in addresses (<10K, native currency)`, `Supply, in addresses (<1K, native currency)`, `Supply, in addresses (<1M, native currency)`, `Supply, Miner address with 1 mining entity (native currency)`, `Supply, All Miners (native currency)`, `Transactions, adjusted transfer value (native currency)`, `Transactions, mean transfer value (native currency)`, `Transactions, median transfer value (native currency)`, `Transactions, mean transfer value ($)`, `Transactions, median transfer value (native currency)`, `Velocity, 1yr current supply`, `Volatility, 180d daily returns`, `Volatility, 30d daily returns`, `Price, BTC`, `Transactions, median transfer value ($)`, `Price, ($)`))
splits <- trainControl(method = "cv", number = 5)
set.seed(712)
Master_CV <- train(
Price ~ .,
data = Master.v5,
method = "glmnet",
trControl = splits,
tuneGrid = data.frame(alpha = 1, lambda = 0.000000001),
na.action = na.omit
)
coefficients(Master_CV$finalModel,0.000000001)
